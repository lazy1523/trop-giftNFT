/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SimpleURIInterface extends ethers.utils.Interface {
  functions: {
    "setTestStr(string)": FunctionFragment;
    "testStr()": FunctionFragment;
    "tokenURI(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "setTestStr", values: [string]): string;
  encodeFunctionData(functionFragment: "testStr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "setTestStr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testStr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {};
}

export class SimpleURI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SimpleURIInterface;

  functions: {
    setTestStr(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTestStr(string)"(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testStr(overrides?: CallOverrides): Promise<[string]>;

    "testStr()"(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256,address,uint256)"(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  setTestStr(
    str: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTestStr(string)"(
    str: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testStr(overrides?: CallOverrides): Promise<string>;

  "testStr()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: BigNumberish,
    owner: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(uint256,address,uint256)"(
    tokenId: BigNumberish,
    owner: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    setTestStr(str: string, overrides?: CallOverrides): Promise<void>;

    "setTestStr(string)"(str: string, overrides?: CallOverrides): Promise<void>;

    testStr(overrides?: CallOverrides): Promise<string>;

    "testStr()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256,address,uint256)"(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    setTestStr(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTestStr(string)"(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testStr(overrides?: CallOverrides): Promise<BigNumber>;

    "testStr()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256,address,uint256)"(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setTestStr(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTestStr(string)"(
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testStr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "testStr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256,address,uint256)"(
      tokenId: BigNumberish,
      owner: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
